datahora:
from datetime import date
from datetime import datetime, timedelta, timezone

data_atual = date.today()
print(data_atual) # Saida padrao

data_em_texto = '{}/{}/{}'.format(data_atual.day, data_atual.month, data_atual.year)
print(data_em_texto) # Substituição do traço por / e ordem dos elementos dd mm AAAA

data_em_texto = data_atual.strftime('%d/%m/%Y')
print(data_em_texto) # Saida formatada com dois digitos para dia e mes

data_e_hora_atuais = datetime.now() # Usando datetime no lugar de date
data_e_hora_em_texto = data_e_hora_atuais.strftime('%d/%m/%Y')
print(data_e_hora_em_texto)

data_e_hora_em_texto = data_e_hora_atuais.strftime('%d/%m/%Y %H:%M')
print(data_e_hora_em_texto) # Saida com data e hora

diferenca = timedelta(hours=-3) # Como indicar o timezone?
print(diferenca)
fuso_horario = timezone(diferenca)
print(fuso_horario) # UTC -3 horas

------------------------------------------------------------------------------------------------
escopo:

def func1(x):
    x = 10
    print(f'Função func1 - x = {x}')


def func2(x):
    x = 20
    print(f'Função func2 - x = {x}')


x = 0
func1(x)
func2(x)
print(f'Programa principal - x = {x}')

''' Saidas:
Função func1 - x = 10
Função func2 - x = 20
Programa principal - x = 0
'''

------------------------------------------------------------------------------------------------
escopo 2:
def func1():
    global x
    x = 10
    print(f'Função func1 - x = {x}')


def func2():
    global x
    x = 20
    print(f'Função func2 - x = {x}')


x = 0
func1()
func2()
print(f'Programa principal - x = {x}')

''' Saida:
Função func1 - x = 10
Função func2 - x = 20
Programa principal - x = 20
'''
------------------------------------------------------------------------------------------------
taximetro:

''' Nesta funcao, o parâmetro multiplicador da função taximetro tem um 
    valor padrão igual a 1. Isso significa que, se não passarmos um valor
    para multiplicador ao chamar a função, ele usará 1 como padrão.
'''
def taximetro(distancia, multiplicador=1):
    largada = 3
    km_rodado = 2
    valor = (largada + distancia * 
    km_rodado) * multiplicador
    return valor # retorna uma valor

pagamento = taximetro(3.5)
print(pagamento) # saida: 10.0

''' Atividade:
    Qual mudança você faria neste código para cobrar uma taxa mínima no
    aplicativo (distancia=1) quando o usuário cancelasse a chamada do
    após 5 minutos do pedido aceito pelo motorista

    Dica: Pesquise sobre o uso das bibliotecas datetime e pytz
'''

------------------------------------------------------------------------------------------------
criador de cpf

from random import randint


def cpf_validate(numbers):
    #  Obtém os números do CPF e ignora outros caracteres
    cpf = [int(char) for char in numbers if char.isdigit()]

    #  Verifica se o CPF tem 11 dígitos
    if len(cpf) != 11:
        return False

    #  Verifica se o CPF tem todos os números iguais, ex: 111.111.111-11
    #  Esses CPFs são considerados inválidos mas passam na validação dos dígitos
    #  Antigo código para referência: if all(cpf[i] == cpf[i+1] for i in range (0, len(cpf)-1))
    if cpf == cpf[::-1]:
        return False

    #  Valida os dois dígitos verificadores
    for i in range(9, 11):
        value = sum((cpf[num] * ((i+1) - num) for num in range(0, i)))
        digit = ((value * 10) % 11) % 10
        if digit != cpf[i]:
            return False
    return True


def cpf_generate():
    #  Gera os primeiros nove dígitos (e certifica-se de que não são todos iguais)
    while True:
        cpf = [randint(0, 9) for i in range(9)]
        if cpf != cpf[::-1]:
            break

    #  Gera os dois dígitos verificadores
    for i in range(9, 11):
        value = sum((cpf[num] * ((i + 1) - num) for num in range(0, i)))
        digit = ((value * 10) % 11) % 10
        cpf.append(digit)

    #  Retorna o CPF como string
    result = ''.join(map(str, cpf))
    return result


opcao = int(input('''[1] Validar um CPF
[2] Gerar um CPF válido
Opção: '''))
if opcao == 1:
    cpf = input('Digite o CPF: ')
    if cpf_validate(cpf):
        print('CPF válido.')
    else:
        print('CPF inválido.')
elif opcao == 2:
    cpf = cpf_generate()
    if cpf_validate(cpf):
        print(f'CPF gerado: {cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:]}')
else:
    print('Inválido.')
------------------------------------------------------------------------------------------------

'''
# Torres de Hanói

O problema envolve uma base de pinos verticais, em que os discos estão
inicialmente empilhados em ordem crescente de tamanho em um dos pinos,
com o disco menor no topo e o disco maior na base. 

O objetivo do problema é mover todos os discos da torre de origem para
a torre de destino, usando a torre auxiliar, de forma que os discos 
permaneçam empilhados em ordem crescente de tamanho em todos os momentos
e que apenas um disco seja movido por vez. Além disso,em nenhum momento
um disco maior pode ser colocado sobre um disco menor.

Agora, para realizar o exercício proposto, execute os passos a seguir.

1. Crie um arquivo de código fonte de Python Hanói recursivo.
2. Crie uma função para processar as torres chamando outra função para
   movimentar os discos.
3. Crie uma função para exibir o conteúdo das torres a cada passo.
4. Chame a função de forma recursiva.
5. Para iniciar o processamento, defina a quantidade de discos, crie as
   torres e chame para execução a função principal.
'''

def mover_disco(origem, destino):
    disco = origem.pop()
    destino.append(disco)

def imprimir_torres(torre_A, torre_B, torre_C):
    print("A:", torre_A)
    print("B:", torre_B)
    print("C:", torre_C)
    print()

def torres_de_hanoi_recursivo(num_discos, origem, destino, auxiliar):
   if num_discos == 1:
        mover_disco(origem, destino)
        imprimir_torres(torre_A, torre_B, torre_C)
   else:
        torres_de_hanoi_recursivo(num_discos - 1, origem, auxiliar, destino)
        mover_disco(origem, destino)
        imprimir_torres(torre_A, torre_B, torre_C)
        torres_de_hanoi_recursivo(num_discos - 1, auxiliar, destino, origem)

# Resolvendo o problema recursivamente
num_disco = 7
# Inicializando as torres e os discos
torre_A = list(range(num_disco, 0, -1))
torre_B = []
torre_C = []
# Mostrando o estado inicial
imprimir_torres(torre_A, torre_B, torre_C)
torres_de_hanoi_recursivo( num_disco, torre_A, torre_C, torre_B)
------------------------------------------------------------------------------------------------
maior numero

# Escreva uma função que busca de forma iterativa o maior elemento em uma lista de números inteiros

def encontrar_maior_elemento_iterativo(lista):
  """
  Encontra o maior elemento em uma lista de números inteiros de forma não recursiva.

  Args:
    lista: A lista de números inteiros.

  Returns:
    O maior elemento da lista.
  """

  if len(lista) <= 1:
    # Caso base: se a lista tiver no máximo 1 elemento, ele é o maior
    return lista[0]

  maior_elemento = lista[0]
  for numero in lista[1:]:
    if numero > maior_elemento:
      maior_elemento = numero

  return maior_elemento

# Exemplo de uso
lista_exemplo = [7, 2, 5, 1, 4, 3, 6]
maior_elemento = encontrar_maior_elemento_iterativo(lista_exemplo)
print(f"O maior elemento da lista é: {maior_elemento}")
------------------------------------------------------------------------------------------------
maior numero 2

def encontrar_maior_elemento_iterativo(lista):
  """
  Encontra o maior elemento em uma lista de números inteiros de forma não recursiva.

  Args:
    lista: A lista de números inteiros.

  Returns:
    O maior elemento da lista.
  """

  if len(lista) <= 1:
    # Caso base: se a lista tiver no máximo 1 elemento, ele é o maior
    return lista[0]

  maior_elemento = lista[0]
  for numero in lista[1:]:
    if numero > maior_elemento:
      maior_elemento = numero

  return maior_elemento

# Exemplo de uso
lista_exemplo = [7, 2, 5, 1, 4, 3, 6]
maior_elemento = encontrar_maior_elemento_iterativo(lista_exemplo)
print(f"O maior elemento da lista é: {maior_elemento}")

def encontrar_maior_elemento_nao_recursivo(lista):
  """
  Encontra o maior elemento em uma lista de números inteiros de forma não recursiva.

  Args:
    lista: A lista de números inteiros.

  Returns:
    O maior elemento da lista.
  """

  if len(lista) <= 1:
    # Caso base: se a lista tiver no máximo 1 elemento, ele é o maior
    return lista[0]

  maior_elemento = lista[0]
  for numero in lista[1:]:
    if numero > maior_elemento:
      maior_elemento = numero

  return maior_elemento

# Exemplo de uso
lista_exemplo = [7, 2, 5, 9, 4, 3, 6]
maior_elemento = encontrar_maior_elemento_nao_recursivo(lista_exemplo)
print(f"O maior elemento da lista é: {maior_elemento}")

------------------------------------------------------------------------------------------------
recursiva:

# Contagem regressiva de 10 a 0

# Uma função recursiva é aquela que chama a si mesma.
def regressiva(x):
  print(x)
  if x > 0:
    regressiva(x - 1)
  else:
    print('acabou')

regressiva(10)

# não recursiva
for y in range(10, -1, -1):
  print(y)
print('acabou')

# Exemplo de 'fatorial de n' ou 'n!'
''' 
O resultado será 1 se n for zero ou um; 
senão teremos n! = n.[n-1!] se n >=2
Que seria n! = n.(n-1).(n-2)...3.2.1 para n>=2
'''

# funcao recursiva fatorial
def fatorial(n):
  if n==0 or n==1:
    return 1
  else:
    return n*fatorial(n-1)
vfat = fatorial(5)
print(f'resultado recursiva: {vfat}')

# funcao fatorial nao recursiva
def fatorial(n):
  fat = 1
  if n==0 or n==1:
    return fat
  else:
    for x in range(2, n + 1):
      fat = fat * x
    return fat

vfat = fatorial(5)
print(f'resultado iterativa: {vfat}')

# docString - mostra os comentários do código fonte
# Determine o n-ésimo termo da sequência de Fibonacci
# q para finalizar o helpq
def fibo(n):
  if n==1 or n==2:
    return 1
  else:
    return fibo(n-1) + fibo(n -2)

vfibo=fibo(6)
print(vfibo)
# docString
print(help(fibo))
      
------------------------------------------------------------------------------------------------
taximetro 2:

def taximetro(distancia):
    def calculaMult():
        if distancia < 5:
            return 1.2
        else:
            return 1

    multiplicador = calculaMult()
    largada = 3
    km_rodado = 2
    valor = (largada + distancia * km_rodado) * multiplicador
    return valor

dist = eval(input("Entre com a distancia a ser percorrida em km: \n"))
pagamento = taximetro(dist)
print(f'O valor a pagar é R$ {pagamento}')

------------------------------------------------------------------------------------------------
validador de cpf: 

''' O Cadastro de Pessoas Físicas (CPF) é um número único atribuido a 
    cada residente no Brasil. Esse número é uma sequência composta por
    11 dígitos numéricos, onde 9 dígitos são únicos e os dois últimos 
    são dígitos verificadores. Os dígitos verificadores são usados para
    garantir a integridade do identificador e são calculados com base 
    nos 9 primeiros dígitos do CPF.

Os dígitos verificadores são calculados usando o algoritmo de módulo 11.
- O primeiro dígito verificador é calculado a partir dos 9 primeiros 
  dígitos do CPF.
- O segundo dígito verificador é calculado a partir dos 9 primeiros 
  dígitos do CPF, incluindo o primeiro dígito verificador.

Verificação
- Uma vez informados os 11 digitos, o cálculo dos digitos verificadores
  é realizado
- Compara-se o resultado com os dígitos verificadores informados
- Se forem iguais o CPF é válido. Caso contrário, é considerado inválido.

Erros e Exceções
- CPFs com todos os dígitos iguais (ex.: 111.111.111-11) ou CPFs com 
padrões específicos que foram anulados pela Receita Federal (baixa do
número de CPF em caso de óbito, por exemplo)

Nesta atividade, serão considerados somentes os tratamentos de números 
para verificar se uma sequência é válida ou não.


Para realizar o exercício proposto, siga o passo a passo.

1. Crie um arquivo fonte chamado validacpf.
2. Crie uma função que:
2.1. Remova os caracteres não numéricos.
2.2. Valide a quantidade de dígitos do CPF.
2.3. Valide se todos os dígitos não são iguais.
2.4. Calcule o primeiro dígito verificador e o valide.
2.5. Calcule o segundo dígito verificador e o valide.
3. Teste a função passando um CPF como parâmetro.
'''

def valida(numeros):
  # 2.1. Obtém os números do CPF e ignora outros caracteres
  cpf = [int(char) for char in numeros if char.isdigit()]
  # 2.2. Verifica se o CPF tem 11 dígitos
  if len(cpf) != 11:
    return False
  # 2.3. Verifica se o CPF tem todos os números iguais, ex: 111.111.111-11
  if cpf == cpf[::-1]:
    return False
  # Valida os dois dígitos verificadores
  for i in range(9, 11):
    value = sum((cpf[num] * ((i+1) - num) for num in range(0, i)))
    digit = ((value * 10) % 11) % 10
    if digit != cpf[i]:
      return False
  return True

cpf = input('Digite o CPF: ')
if valida(cpf):
  print('CPF válido.')
else:
  print('CPF inválido.')
------------------------------------------------------------------------------------------------
validador de  cpf 2:

def validar_cpf(cpf):
    # Removendo caracteres não numéricos
    cpf = ''.join(filter(str.isdigit, cpf))

    # Verificando se o CPF possui 11 dígitos
    if len(cpf) != 11:
        return False

    # Verificando se todos os dígitos são iguais (caso raro, mas inválido)
    if cpf == cpf[0] * 11:
        return False

    # Calculando o primeiro dígito verificador
    soma = sum(int(cpf[i]) * (10 - i) for i in range(9))
    resto = soma % 11
    if resto < 2:
        digito_verificador_1 = 0
    else:
        digito_verificador_1 = 11 - resto

    # Verificando o primeiro dígito verificador
    if int(cpf[9]) != digito_verificador_1:
        return False

    # Calculando o segundo dígito verificador
    soma = sum(int(cpf[i]) * (11 - i) for i in range(10))
    resto = soma % 11
    if resto < 2:
        digito_verificador_2 = 0
    else:
        digito_verificador_2 = 11 - resto

    # Verificando o segundo dígito verificador
    if int(cpf[10]) != digito_verificador_2:
        return False

    # CPF válido
    return True
 
# Testando a função
#cpf = "123.456.789-09"
cpf = input("Digite o CPF: ")
if validar_cpf(cpf):
    print(f"O CPF {cpf} é válido.")
else:
    print(f"O CPF {cpf} é inválido.")
